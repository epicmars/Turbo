/*
 * Copyright 2018 yinpinjiu@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

def localProperties = new Properties()
rootProject.file("local.properties").withInputStream {
    stream ->
        localProperties.load(stream)
}

boolean isAndroidProject() {
    return project.getPlugins().hasPlugin('com.android.library') || project.getPlugins().hasPlugin('com.android.application')
}

if (isAndroidProject()) {
    // build a jar with source files
    task androidSourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    task androidJavadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        options {
            encoding 'UTF-8'
            charSet 'UTF-8'
            locale 'en'
        }
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
    }

// build a jar with javadoc
    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    artifacts {
        archives androidSourcesJar, androidJavadocJar
    }


    bintrayUpload.mustRunAfter('assembleRelease', 'generatePomFileForProductionPublication', 'androidSourcesJar', 'androidJavadocJar')

    task upload {
        dependsOn 'generatePomFileForProductionPublication'
        dependsOn 'androidSourcesJar'
        dependsOn 'androidJavadocJar'
        dependsOn 'assembleRelease'
        dependsOn 'bintrayUpload'
        group 'publishing'
    }
} else {

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javaDoc(type: Javadoc) {
        failOnError false
        source = sourceSets.main.allJava
        options {
            encoding 'UTF-8'
            charSet 'UTF-8'
            locale 'en'
        }
    }

    task javadocJar(type: Jar, dependsOn: javaDoc) {
        classifier = 'javadoc'
        from javaDoc.destinationDir
    }

    artifacts {
        archives sourcesJar, javadocJar
    }

    bintrayUpload.mustRunAfter('assemble', 'generatePomFileForProductionPublication', 'sourcesJar', 'javadocJar')

    task upload {
        dependsOn 'generatePomFileForProductionPublication'
        dependsOn 'sourcesJar'
        dependsOn 'javadocJar'
        dependsOn 'assemble'
        dependsOn 'bintrayUpload'
        group 'publishing'
    }
}


def pomConfig = {
    scm {
        connection POM_SCM_CONNECTION
        developerConnection POM_SCM_DEVELOPERCONNECTION
        url POM_SCM_URL
    }

    licenses {
        license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            id 'jastrelax'
            name 'PinJiu Yin'
            email 'yinpinjiu@gmail.com'
        }
    }
}

publishing {
    publications {
        Production(MavenPublication) {

            artifactId project.name
            version VERSION
            groupId GROUP

            pom {
                packaging = POM_PACKAGING
            }

            pom.withXml {
                def root = asNode()
                root.appendNode('name', POM_NAME)
                root.appendNode('description', POM_DESCRIPTION)
                root.appendNode('url', POM_URL)
                def dependenciesNode = root.appendNode('dependencies')
                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
                root.children().last() + pomConfig
            }
        }
    }
}


bintray {
    user = localProperties['bintray.user']
    key = localProperties['bintray.api.key']

    publications = ['Production']
    configurations = ['archives']
    override = true
    publish = true
    dryRun = false

    pkg {
        repo = 'maven'
        name = "${GROUP}:${project.name}"
        desc = POM_DESCRIPTION
        publicDownloadNumbers = false
        licenses = ['Apache-2.0']
        vcsUrl = VCS_URL
        websiteUrl = VCS_SITE_URL

        githubRepo = GITHUB_REPO

        version {
            name = VERSION
            desc = "${POM_NAME} ${VERSION}"
            released = new Date()
            vcsTag = VERSION

            gpg {
                sign = true
                passphrase = localProperties['signing.password']
            }

            //Configuration for Maven Central sync of the version
            mavenCentralSync {
                sync = false
                user = localProperties['sonatype.ossrh.user']
                password = localProperties['sonatype.ossrh.passwd']
                close = '0'
            }
        }
    }
}

